// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wordpicker_API.Contexts;

#nullable disable

namespace Wordpicker_API.Migrations
{
    [DbContext(typeof(WordpickerContext))]
    [Migration("20240629044624_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Wordpicker_API.Models.RegisteredWords", b =>
                {
                    b.Property<string>("Word")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefinitionEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DefinitionJP")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Word");

                    b.ToTable("RegisteredWords");

                    b.HasComment("Simple English word data table");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIDefinition", b =>
                {
                    b.Property<int>("DefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DefinitionEN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DefinitionJP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("DefinitionId");

                    b.HasIndex("WordId");

                    b.ToTable("WordAPIDefinition");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIExample", b =>
                {
                    b.Property<int>("ExampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("ExampleId");

                    b.HasIndex("WordId");

                    b.ToTable("WordAPIExample");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPISynonym", b =>
                {
                    b.Property<int>("SynonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Synonym")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("SynonymId");

                    b.HasIndex("WordId");

                    b.ToTable("WordAPISynonym");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.HasIndex("WordId");

                    b.ToTable("WordAPIType");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIWord", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ExampleAudio")
                        .HasColumnType("longtext");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("longtext");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("YourAudio")
                        .HasColumnType("longtext");

                    b.HasKey("WordId");

                    b.ToTable("WordAPIWord");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIDefinition", b =>
                {
                    b.HasOne("Wordpicker_API.Models.WordAPI.WordAPIWord", "Word")
                        .WithMany("Definitions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIExample", b =>
                {
                    b.HasOne("Wordpicker_API.Models.WordAPI.WordAPIWord", "Word")
                        .WithMany("Examples")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPISynonym", b =>
                {
                    b.HasOne("Wordpicker_API.Models.WordAPI.WordAPIWord", "Word")
                        .WithMany("Synonyms")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIType", b =>
                {
                    b.HasOne("Wordpicker_API.Models.WordAPI.WordAPIWord", "Word")
                        .WithMany("Types")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Wordpicker_API.Models.WordAPI.WordAPIWord", b =>
                {
                    b.Navigation("Definitions");

                    b.Navigation("Examples");

                    b.Navigation("Synonyms");

                    b.Navigation("Types");
                });
#pragma warning restore 612, 618
        }
    }
}
